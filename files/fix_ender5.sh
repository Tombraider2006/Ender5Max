#!/bin/sh
set -u

PRINTER_CFG="/usr/data/printer_data/config/printer.cfg"
MACRO_CFG="/usr/data/printer_data/config/gcode_macro.cfg"
PRINTER_BAK="${PRINTER_CFG}.bak"
MACRO_BAK="${MACRO_CFG}.bak"

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
die() { echo "ERROR: $*" 1>&2; exit 1; }

check_tools() {
  # –ü—Ä–æ–≤–µ—Ä–∏–º –±–∞–∑–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã
  for t in awk sed grep cp mv rm cat; do
    if ! command -v "$t" >/dev/null 2>&1; then
      die "–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–∏–ª–∏—Ç–∞ '$t' –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ PATH"
    fi
  done
}

# remove_section <file> "<exact header line>"
# –£–¥–∞–ª—è–µ—Ç –±–ª–æ–∫ –Ω–∞—á–∏–Ω–∞—è —Å —Å—Ç—Ä–æ–∫–∏, —Å–æ–≤–ø–∞–¥–∞—é—â–µ–π —Å header, –¥–æ —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è —Å '[' (—Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏) –∏–ª–∏ EOF.
remove_section() {
  file="$1"
  header="$2"
  [ -f "$file" ] || return 0
  # –ï—Å–ª–∏ header –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  if ! grep -xF "$header" "$file" >/dev/null 2>&1; then
    return 0
  fi
  awk -v h="$header" '
    BEGIN { skip=0 }
    {
      if ($0 == h) { skip=1; next }
      if (skip && /^\[/) { skip=0 }
      if (!skip) print
    }
  ' "$file" > "${file}.tmp" && mv "${file}.tmp" "$file"
}

section_exists() {
  file="$1"; header="$2"
  [ -f "$file" ] || return 1
  grep -xF "$header" "$file" >/dev/null 2>&1
}

# ---------- –®–∞–ø–∫–∞ / –º–µ–Ω—é ----------
show_header() {
  clear
  echo "========================================"
  echo "üöÄ Tom Tomich Script (Ender-5 Max Fix)"
  echo "========================================"
  echo ""
}

check_status() {
  if [ -f "$PRINTER_BAK" ] && [ -f "$MACRO_BAK" ]; then
    FIXED=true
  else
    FIXED=false
  fi
}

# ---------- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ----------
apply_fix() {
  echo "‚öôÔ∏è  –ü—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
  # –ü—Ä–æ–≤–µ—Ä–∫–∏
  [ -f "$PRINTER_CFG" ] || { echo "‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω $PRINTER_CFG"; read -p "–ù–∞–∂–º–∏—Ç–µ Enter..."; return 1; }
  [ -f "$MACRO_CFG" ] || { echo "‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω $MACRO_CFG"; read -p "–ù–∞–∂–º–∏—Ç–µ Enter..."; return 1; }

  # –ë—ç–∫–∞–ø—ã
  echo "–°–æ–∑–¥–∞—é –±—ç–∫–∞–ø—ã..."
  cp -p "$PRINTER_CFG" "$PRINTER_BAK"
  cp -p "$MACRO_CFG" "$MACRO_BAK"

  ########################################
  # 1) –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ printer.cfg
  ########################################

  # 1.1 –ó–∞–º–µ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ [output_pin Height_module2] -> [output_pin _Height_module2]
  # (–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏)
  if grep -xF "[output_pin Height_module2]" "$PRINTER_CFG" >/dev/null 2>&1; then
    sed -i 's/^\[output_pin Height_module2\]$/[output_pin _Height_module2]/' "$PRINTER_CFG"
    echo " - –∑–∞–º–µ–Ω—ë–Ω [output_pin Height_module2] -> [output_pin _Height_module2]"
  else
    echo " - [output_pin Height_module2] –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø—Ä–æ–ø—É—Å–∫–∞—é)"
  fi

  # 1.2 –°–µ–∫—Ü–∏—è light_pin: —É–¥–∞–ª—è–µ–º –ª—é–±—É—é —Å—Ç–∞—Ä—É—é —Å–µ–∫—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—É—é (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç)
  remove_section "$PRINTER_CFG" "[output_pin light_pin]"
  if ! grep -xF "[output_pin light_pin] # –æ—Å–≤–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø—Ä–∏–Ω—Ç–µ—Ä–∞. –∫–æ—Å—è–∫ –ø—Ä–æ—à–∏–≤–∫–∏ –∫—Ä–µ–∞–ª–∏—Ç–∏." "$PRINTER_CFG" >/dev/null 2>&1; then
    cat >> "$PRINTER_CFG" <<'EOF'

[output_pin light_pin] # –æ—Å–≤–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø—Ä–∏–Ω—Ç–µ—Ä–∞. –∫–æ—Å—è–∫ –ø—Ä–æ—à–∏–≤–∫–∏ –∫—Ä–µ–∞–ª–∏—Ç–∏.
pin: !PC0
pwm: True
cycle_time: 0.010
value: 1.0
EOF
    echo " - –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å–µ–∫—Ü–∏—è [output_pin light_pin]"
  else
    echo " - —Å–µ–∫—Ü–∏—è [output_pin light_pin] —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
  fi

  # 1.3 –ó–∞–º–µ–Ω–∞ MainBoardFan -> controller_fan MCU_fan
  remove_section "$PRINTER_CFG" "[output_pin MainBoardFan]"
  if ! grep -xF "[controller_fan MCU_fan] # –≤–∫–ª—é—á–∞–µ–º –æ–±–¥—É–≤ –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–æ–≤" "$PRINTER_CFG" >/dev/null 2>&1; then
    cat >> "$PRINTER_CFG" <<'EOF'

[controller_fan MCU_fan] # –≤–∫–ª—é—á–∞–µ–º –æ–±–¥—É–≤ –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–æ–≤
pin: PB1
max_power: 1.0
fan_speed: 1
kick_start_time: 0
stepper: stepper_x
EOF
    echo " - –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å–µ–∫—Ü–∏—è [controller_fan MCU_fan]"
  else
    echo " - —Å–µ–∫—Ü–∏—è [controller_fan MCU_fan] —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
  fi

  ########################################
  # 2) –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ gcode_macro.cfg
  ########################################

  # –°–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
  headers_to_remove="
[firmware_retraction]
[gcode_shell_command beep]
[gcode_macro BEEP]
[delayed_gcode light_init]
[exclude_object]
[gcode_macro PID_BED]
[gcode_macro PID_HOTEND]
[gcode_macro M106]
[gcode_macro M107]
[gcode_macro TURN_OFF_FANS]
[gcode_macro TURN_ON_FANS]
"
  # –£–¥–∞–ª—è–µ–º –∏—Ö –ø–æ –æ—á–µ—Ä–µ–¥–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  for h in $headers_to_remove; do
    # trim possible spaces
    h_trim=$(printf "%s" "$h" | sed 's/^ *//; s/ *$//')
    remove_section "$MACRO_CFG" "$h_trim"
  done

  # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
  if ! grep -xF "[firmware_retraction]" "$MACRO_CFG" >/dev/null 2>&1; then
    cat >> "$MACRO_CFG" <<'EOF'

[firmware_retraction]
retract_length: 0.45
retract_speed: 30
unretract_extra_length: 0
unretract_speed: 30
EOF
    echo " - –¥–æ–±–∞–≤–ª–µ–Ω [firmware_retraction]"
  else
    echo " - [firmware_retraction] —É–∂–µ –µ—Å—Ç—å"
  fi

  if ! grep -xF "[gcode_shell_command beep]" "$MACRO_CFG" >/dev/null 2>&1; then
    cat >> "$MACRO_CFG" <<'EOF'

[gcode_shell_command beep]
command: beep
timeout: 2
verbose: False
EOF
    echo " - –¥–æ–±–∞–≤–ª–µ–Ω [gcode_shell_command beep]"
  else
    echo " - [gcode_shell_command beep] —É–∂–µ –µ—Å—Ç—å"
  fi

  if ! grep -xF "[gcode_macro BEEP]" "$MACRO_CFG" >/dev/null 2>&1; then
    cat >> "$MACRO_CFG" <<'EOF'

[gcode_macro BEEP]
description: Play a sound
gcode:
  RUN_SHELL_COMMAND CMD=beep
EOF
    echo " - –¥–æ–±–∞–≤–ª–µ–Ω [gcode_macro BEEP]"
  else
    echo " - [gcode_macro BEEP] —É–∂–µ –µ—Å—Ç—å"
  fi

  if ! grep -xF "[delayed_gcode light_init]" "$MACRO_CFG" >/dev/null 2>&1; then
    cat >> "$MACRO_CFG" <<'EOF'

[delayed_gcode light_init]
initial_duration: 5.01
gcode:
  SET_PIN PIN=light_pin VALUE=1
EOF
    echo " - –¥–æ–±–∞–≤–ª–µ–Ω [delayed_gcode light_init]"
  else
    echo " - [delayed_gcode light_init] —É–∂–µ –µ—Å—Ç—å"
  fi

  if ! grep -xF "[exclude_object]" "$MACRO_CFG" >/dev/null 2>&1; then
    cat >> "$MACRO_CFG" <<'EOF'

[exclude_object]
EOF
    echo " - –¥–æ–±–∞–≤–ª–µ–Ω [exclude_object]"
  else
    echo " - [exclude_object] —É–∂–µ –µ—Å—Ç—å"
  fi

  if ! grep -xF "[gcode_macro PID_BED]" "$MACRO_CFG" >/dev/null 2>&1; then
    cat >> "$MACRO_CFG" <<'EOF'

[gcode_macro PID_BED]
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET={params.BED_TEMP|default(70)}
  SAVE_CONFIG
EOF
    echo " - –¥–æ–±–∞–≤–ª–µ–Ω [gcode_macro PID_BED]"
  else
    echo " - [gcode_macro PID_BED] —É–∂–µ –µ—Å—Ç—å"
  fi

  if ! grep -xF "[gcode_macro PID_HOTEND]" "$MACRO_CFG" >/dev/null 2>&1; then
    cat >> "$MACRO_CFG" <<'EOF'

[gcode_macro PID_HOTEND]
description: Start Hotend PID
gcode:
  G90
  G28
  G1 Z10 F600
  M106 S255 # –≤–∫–ª—é—á–µ–Ω–∏–µ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞
  PID_CALIBRATE HEATER=extruder TARGET={params.HOTEND_TEMP|default(250)}
  M107 # –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞
EOF
    echo " - –¥–æ–±–∞–≤–ª–µ–Ω [gcode_macro PID_HOTEND]"
  else
    echo " - [gcode_macro PID_HOTEND] —É–∂–µ –µ—Å—Ç—å"
  fi

  # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Ä–æ—Å—ã M106/M107/TURN_ON/OFF
  if ! grep -xF "[gcode_macro M106]" "$MACRO_CFG" >/dev/null 2>&1; then
    cat >> "$MACRO_CFG" <<'EOF'

[gcode_macro M106]
description: Set Fan Speed. P0 for part
gcode:
  {% set fan_id = params.P|default(0)|int %}
  {% if fan_id == 0 %}
    {% set speed_param = params.S|default(255)|int %}
    {% if speed_param > 0 %}
      {% set speed = (speed_param|float / 255) %}
    {% else %}
      {% set speed = 0 %}
    {% endif %}
    SET_FAN_SPEED FAN=part SPEED={speed}
  {% endif %}
EOF
    echo " - –¥–æ–±–∞–≤–ª–µ–Ω [gcode_macro M106]"
  else
    echo " - [gcode_macro M106] —É–∂–µ –µ—Å—Ç—å"
  fi

  if ! grep -xF "[gcode_macro M107]" "$MACRO_CFG" >/dev/null 2>&1; then
    cat >> "$MACRO_CFG" <<'EOF'

[gcode_macro M107]
description: Set Fan Off. P0 for part
gcode:
  SET_FAN_SPEED FAN=part SPEED=0
EOF
    echo " - –¥–æ–±–∞–≤–ª–µ–Ω [gcode_macro M107]"
  else
    echo " - [gcode_macro M107] —É–∂–µ –µ—Å—Ç—å"
  fi

  if ! grep -xF "[gcode_macro TURN_OFF_FANS]" "$MACRO_CFG" >/dev/null 2>&1; then
    cat >> "$MACRO_CFG" <<'EOF'

[gcode_macro TURN_OFF_FANS]
description: Stop chamber, auxiliary and part fan
gcode:
  SET_FAN_SPEED FAN=part SPEED=0
EOF
    echo " - –¥–æ–±–∞–≤–ª–µ–Ω [gcode_macro TURN_OFF_FANS]"
  else
    echo " - [gcode_macro TURN_OFF_FANS] —É–∂–µ –µ—Å—Ç—å"
  fi

  if ! grep -xF "[gcode_macro TURN_ON_FANS]" "$MACRO_CFG" >/dev/null 2>&1; then
    cat >> "$MACRO_CFG" <<'EOF'

[gcode_macro TURN_ON_FANS]
description: Turn on chamber, auxiliary and part fan
gcode:
  SET_FAN_SPEED FAN=part SPEED=1
EOF
    echo " - –¥–æ–±–∞–≤–ª–µ–Ω [gcode_macro TURN_ON_FANS]"
  else
    echo " - [gcode_macro TURN_ON_FANS] —É–∂–µ –µ—Å—Ç—å"
  fi

  echo "‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã (–±—ç–∫–∞–ø—ã: ${PRINTER_BAK}, ${MACRO_BAK})."
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter..."
}

# ---------- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ----------
restore_fix() {
  echo "‚ôªÔ∏è  –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã..."
  if [ -f "$PRINTER_BAK" ] && [ -f "$MACRO_BAK" ]; then
    cp -p "$PRINTER_BAK" "$PRINTER_CFG"
    cp -p "$MACRO_BAK" "$MACRO_CFG"
    rm -f "$PRINTER_BAK" "$MACRO_BAK"
    echo "‚úÖ –§–∞–π–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –±—ç–∫–∞–ø–æ–≤."
  else
    echo "‚ùó –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${PRINTER_BAK} –∏–ª–∏ ${MACRO_BAK}"
  fi
  read -p "–ù–∞–∂–º–∏—Ç–µ Enter..."
}

# ---------- Main ----------
check_tools

while true; do
  show_header
  check_status
  echo "–ú–µ–Ω—é:"
  if [ "$FIXED" = false ]; then
    echo -e "[1] \033[1;32m–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\033[0m"
    echo -e "[2] \033[1;31m–û—Ç–∫–∞—Ç–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)\033[0m"
  else
    echo -e "[1] \033[1;31m–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)\033[0m"
    echo -e "[2] \033[1;32m–û—Ç–∫–∞—Ç–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\033[0m"
  fi
  echo -e "[3] –í—ã–π—Ç–∏\n"
  printf "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: "
  read choice
  case "$choice" in
    1)
      if [ "$FIXED" = false ]; then
        printf "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/n): "
        read ans
        if [ "$ans" = "y" ] || [ "$ans" = "Y" ]; then
          apply_fix
        fi
      else
        echo "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã ‚Äî —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–∞—Ç–∏—Ç–µ."
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter..."
      fi
    ;;
    2)
      if [ "$FIXED" = true ]; then
        printf "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞—Ç–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è? (y/n): "
        read ans
        if [ "$ans" = "y" ] || [ "$ans" = "Y" ]; then
          restore_fix
        fi
      else
        echo "–ù–µ—á–µ–≥–æ –æ—Ç–∫–∞—Ç—ã–≤–∞—Ç—å."
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter..."
      fi
    ;;
    3) exit 0 ;;
  esac
done
